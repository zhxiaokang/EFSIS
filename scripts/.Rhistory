roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 1)
pred[1]
pred[2]<-0
pred[2]<-1
roc(pred,labels)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = FALSE, algorithm = 2)
library(GeoDE)
data(example_expression_data)
remove(list=ls())
data(example_expression_data)
data(example_sampleclass)
data(example_gammas)
example_gammas
head(example_expression_data)
example_sampleclass
chdir_analysis_example <- chdirAnalysis(example_expression_data,example_sampleclass,example_gammas ,CalculateSig=TRUE,nnull=10)
lapply(chdir_analysis_example$results, function(x) x[1:10])
chdir_analysis_example$results
length(chdir_analysis_example$results)
nrow(chdir_analysis_example$results)
ncol(chdir_analysis_example$results)
size(chdir_analysis_example$results)
lapply(chdir_analysis_example$chdirprops[[1]],head)
chdir_analysis_example$chdirprops$number_sig_genes
length(example_expression_data$genenames)
chdirAnalysis(datain, sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(datain, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(example_expression_data, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
class(example_sampleclass)
q()
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
ROCR.simple$predictions
ROCR.simple$labels
ROCR.simple$predictions
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred<-c(1,0,1,1)
label<-c(10,1,0)
label<-c(1,0,1,0)
preds<-prediction(pred,label)
preds
perf <- performance(preds,"tpr","fpr")
perf
library('pROC')
data(aSAH)
# Syntax (response, predictor):
auc(aSAH$outcome, aSAH$s100b)
auc(pred,label)
q()
data("iris")
head(iris)
View(iris)
ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
iris3
iris
iris1
iris3[,,1]
iris3[,,2]
x<-matrix(c(1,2,3,4),2,2)
y<-matrix(c(5,6,7,8),2,2)
cbind(x,y)
rbind(x,y)
View(ird)
View(ird)
View(iris)
data(diamonds)
library(ggplot2)
data(diamonds)
class(diamonds)
library(data.table)
dataframe<-data.table(diamonds)
class(dataframe)
test<-data.frame(student=c('xiaoming','xiaohong','xiaogang'),math=c(89,90,78),english=c(97,69,90))
test
?tableGrod
??tableGrod
grid.arrange(test)
?tableGrob
library(gridExtra)
tableGrob(test)
grid.table(test)
text<-tableGrob(test)
grid.arrange(text)
grid.arrange(text)
text<-tableGrob(test,rows=NULL)
grid.arrange(text)
grid.table(test,rows=NULL)
??grid.table
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GOSemSim")
library(GOSemSim)
go1<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006493')
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006499')
mgoSim(go1,go2,ont='MF',organism='human',measure='Wang')
mgoSim(go1,go2,measure = 'Wang')
?mgoSim
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
install.packages('org.Hs.eg.db')
source("http://bioconductor.org/biocLite.R")
biocLite('org.Hs.eg.db')
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
go1
go2
mgoSim(go1, go2, semData=d, measure="Resnik")
mgoSim(go1, go2, semData=d, measure="Lin")
mgoSim(go1, go2, semData=d, measure="Wang")
mgoSim(go1, go2, semData=d, measure="Jiang")
?godata
d <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="BP", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="MF", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
go2<-c('GO:0005739','0005777','0004169','0008490')
go2<-c('0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
1/3
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
exit
quit
q()
lens <- c(900, 1020, 2000, 770, 3000, 1777)
sum(lens)
sum(lens)/len(lens)
sum(lens)/length(lens)
length(lens)
control<-c(0,0,0,0,0,1,1,1)
drug<-c(0,0,0,0,1,1,1,1)
control<-data.frame(control)
drug<-data.frame(drug)
df<-rbind(data.frame(fill='green',obs=control$control),data.frame(fill='red',obs=drug$drug))
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
library(ggplot)
library(ggplot2)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=.1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
which(control$control==1)
length(control$control)
length(control$control==1)
length(control==1)
seq(1,100)
q()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("edgeR")
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2')))
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
m
m<-array(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
m
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m<-array(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m<-array(1:6, c(2,3,1), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m
m<-array(1:6, c(2), dimnames = list(c('a1','a2')))
m
class(m)
m<-c(1:6)
m
class(m)
data(mtcars)
mtcars
mtcars[3,1]
mtcars[1:2]
mtcars[1,2]
mtcars['mpg']
mtcars[c('mpg','cyl')]
rownames(mtcars)
case_identifier <- rownames(mtcars)
mpg <- mtcars$mpg
cyl <- mtcars['cyl']
class(case_identifier)
class(mpg)
class(cyl)
cyl
mpg
cyl <- mtcars$cyl
cyl
case_identifier
new_data_frame <- data.frame(case_identifier, mpg, cyl, row.names = case_identifier)
new_data_frame
another_data_frame <- mtcars[1:3]
another_data_frame
another_data_frame <- mtcars[c('mpg', 'cyl')]
another_data_frame
mtcars[1]
mtcars[1,1:3]
test<-mtcars[1,1:3]
test
class(test)
test<-mtcars[1]
test
class(test)
test<-mtcars[1,2]
test
class(test)
test<-mtcars[1,2,3]
test
status<-c('poor', 'improved', 'excellent')
status
f_status <- factor(status)
f_status
f_status_or <- factor(status, ordered = T)
f_status_or
status<-c('bad', 'improved', 'excellent')
f_status_or <- factor(status, ordered = T)
f_status_or
f_status_or <- factor(status, ordered = T, levels = c('bad', 'improved', 'excellent'))
f_status_or
g<-'my first list'
h<-c(1,2,3,4)
j<-matrix(1:10, nrow = 5)
k<-c('one', 'two', 'three')
mylist<-list(title=g, ages=h, j,k)
mylist
mylist[[2]]
mylist[['ages']]
mylist$ages
test<-mylist[[2]]
class(test)
test<-mylist[['ages']]
class(test)
test<-mylist$ages
class(test)
q()
library(edgeR)
edgeR --version
?edgeR
sessionInfo()
q()
install.packages(doMC)
q()
dat <- data.frame(a=c(1, Inf), b=c(Inf, 3), d=c("a","b"))
data
dat
is.na(dat) <- sapply(dat, is.infinite)
dat
?sapply
q()
student<-data.frame(ID=c(11,12,13),Name=c("Devin","Edward","Wenli"),Gender=c("M","M","F"),Birthdate=c("1984-12-29","1983-5-6","1986-8-8”))
）
)
i
)
)
l<-list(c(1,2,3),c(4,5,6))
l
q()
library(DESeq2)
sessionInfo()
library(edgeR)
sessionInfo()
q()
setwd('/Users/xzh004/GitHub/EFSIS/scripts')
library(foreign)
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt')
View(dlbcl.raw)
write.arff(dlbcl.raw, '../data/DLBCL/dlbcl.arff')
dlbcl.arff <- read.arff('../data/DLBCL/dlbcl.arff')
View(dlbcl.arff)
iris <- load(iris)
iris <- load('iris')
head(iris)
write.arff(iris, '../data/DLBCL/iris.arff')
View(iris)
temp<-t(dlbcl.raw)
View(temp)
ncol(temp)
temp[,2648]
temp[,2648] <- factor(temp[,2648])
temp[,2648]
temp[,2647]
temp[1,]
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
View(dlbcl.raw)
temp <- t(dlbcl.raw)
temp[1:4,1:4]
ncol(temp)
temp[,2648]
class(temp[,2648])
temp[, ncol(temp)] <- factor(temp[, ncol(temp)])
class(temp[,2648])
class(temp[,2648])
temp[,2648]
temp[1,2648]
temp[, ncol(temp)] <- factor(temp[, ncol(temp)])
temp[1,2648]
levels(temp[,2648])
View(temp)
# Dlbcl
dlbcl.raw <- as.data.frame.matrix(read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1))
View(dlbcl.raw)
temp <- t(dlbcl.raw)
temp <- as.data.frame.matrix(t(dlbcl.raw))
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
temp <- as.data.frame.matrix(t(dlbcl.raw))
ncol(temp)
temp[,2648]
View(temp)
temp$ydlbcl
class(temp$ydlbcl)
temp$ydlbcl <- factor(temp$ydlbcl)
class(temp$ydlbcl)
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
dlbcl.df <- as.data.frame.matrix(t(dlbcl.raw))
dlbcl.df$ydlbcl <- factor(dlbcl.df$ydlbcl)
write.arff(dlbcl.df, '../data/DLBCL/dlbcl.arff')
dlbcl.arff <- read.arff('../data/DLBCL/dlbcl.arff')
# CNS
cns.raw <- read.arff('../data/CNS/cns')
View(cns.raw)
cns.raw$CLASS
temp$ydlbcl
write.arff(cns.raw, '../data/CNS/cns.arff')
# Leukemia
leukemia.train <- read.arff('../data/Leukemia/train.arff')
leukemia.test <- read.arff('../data/Leukemia/test.arff')
head(leukemia.test)
dim(leukemia.test)
leukemia.test[,1]
row.names(leukemia.test)
class(leukemia.test)
temp<- cbind(leukemia.train, leukemia.test)
temp<- rbind(leukemia.train, leukemia.test)
class(temp)
leukemia.raw <- rbind(leukemia.train, leukemia.test)
leukemia.raw$CLASS
leukemia.train$CLASS
leukemia.test$CLASS
write.arff(leukemia.raw, '../data/Leukemia/leukemia.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$yprostate.singh <- factor(prostate.singh.df$yprostate.singh)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
View(cns.raw)
dim(prostate.singh.raw)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
dim(prostate.singh.raw)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$ysingh
prostate.singh.raw$V103
prostate.singh.raw[,103]
prostate.singh.raw[1,103]
prostate.singh.raw[1,102]
prostate.singh.raw[2136,]
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
class(prostate.singh.raw)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
prostate.singh.df <- t(prostate.singh.raw)
class(prostate.singh.df)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
class(prostate.singh.df)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
dim(prostate.singh.raw)
prostate.singh.raw$V2
prostate.singh.raw$V103
prostate.singh.raw[1,2]
dim(prostate.singh.raw)
prostate.singh.raw[1,2136]
prostate.singh.raw[1,2135]
prostate.singh.raw[2136,]
prostate.singh.df[,1:2135]<- as.numeric(prostate.singh.df[,1:2135])
rep(2,3)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = rep('numeric', 2136))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = c('string',rep('numeric', 2135)))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = c('string',rep('numeric', 102)))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, stringsAsFactors = F)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$`1005_at`
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$ysingh
prostate.singh.df$`1005_at`
prostate.singh.df$ysingh
prostate.singh.df$`1005_at`
sapply(prostate.sign, mode)
sapply(prostate.singh.df, mode)
sapply(prostate.singh.df[,2136], mode)
dim(prostate.singh.df)
data(cars)
cars[,1:2]
cars
?sapply
temp<-sapply(prostate.singh.df[,1:2135], as.numeric)
class(temp)
temp<-as.data.frame(sapply(prostate.singh.df[,1:2135], as.numeric))
class(temp)
temp$`1005_at`
prostate.singh.df[,1]
prostate.singh.df$`1005_at`
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, nrows = 2135)
dim(prostate.singh.raw)
prostate.singh.raw[2135,]
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$`1005_at`
prostate.singh.class <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, skip = 2135)
prostate.singh.class
dim(prostate.singh.class)
# Prostate Singh
prostate.singh.feature <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, nrows = 2135)
prostate.singh.class <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, skip = 2135)
prostate.singh.feature.df <- as.data.frame.matrix(t(prostate.singh.feature))
prostate.singh.class.df <- as.data.frame.matrix(t(prostate.singh.class))
dim(prostate.singh.feature.df)
dim(prostate.singh.class.df)
View(prostate.singh.class.df)
prostate.singh.df <- cbind(prostate.singh.feature.df, prostate.singh.class.df)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
q()
