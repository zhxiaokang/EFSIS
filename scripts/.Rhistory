length(control==1)
seq(1,100)
q()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("edgeR")
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2')))
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
m
m<-array(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
m
m<-matrix(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m<-array(1:6, c(2,3), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m<-array(1:6, c(2,3,1), dimnames = list(c('a1','a2'), c('b1', 'b2', 'b3')))
class(m)
m
m<-array(1:6, c(2), dimnames = list(c('a1','a2')))
m
class(m)
m<-c(1:6)
m
class(m)
data(mtcars)
mtcars
mtcars[3,1]
mtcars[1:2]
mtcars[1,2]
mtcars['mpg']
mtcars[c('mpg','cyl')]
rownames(mtcars)
case_identifier <- rownames(mtcars)
mpg <- mtcars$mpg
cyl <- mtcars['cyl']
class(case_identifier)
class(mpg)
class(cyl)
cyl
mpg
cyl <- mtcars$cyl
cyl
case_identifier
new_data_frame <- data.frame(case_identifier, mpg, cyl, row.names = case_identifier)
new_data_frame
another_data_frame <- mtcars[1:3]
another_data_frame
another_data_frame <- mtcars[c('mpg', 'cyl')]
another_data_frame
mtcars[1]
mtcars[1,1:3]
test<-mtcars[1,1:3]
test
class(test)
test<-mtcars[1]
test
class(test)
test<-mtcars[1,2]
test
class(test)
test<-mtcars[1,2,3]
test
status<-c('poor', 'improved', 'excellent')
status
f_status <- factor(status)
f_status
f_status_or <- factor(status, ordered = T)
f_status_or
status<-c('bad', 'improved', 'excellent')
f_status_or <- factor(status, ordered = T)
f_status_or
f_status_or <- factor(status, ordered = T, levels = c('bad', 'improved', 'excellent'))
f_status_or
g<-'my first list'
h<-c(1,2,3,4)
j<-matrix(1:10, nrow = 5)
k<-c('one', 'two', 'three')
mylist<-list(title=g, ages=h, j,k)
mylist
mylist[[2]]
mylist[['ages']]
mylist$ages
test<-mylist[[2]]
class(test)
test<-mylist[['ages']]
class(test)
test<-mylist$ages
class(test)
q()
library(edgeR)
edgeR --version
?edgeR
sessionInfo()
q()
install.packages(doMC)
q()
dat <- data.frame(a=c(1, Inf), b=c(Inf, 3), d=c("a","b"))
data
dat
is.na(dat) <- sapply(dat, is.infinite)
dat
?sapply
q()
student<-data.frame(ID=c(11,12,13),Name=c("Devin","Edward","Wenli"),Gender=c("M","M","F"),Birthdate=c("1984-12-29","1983-5-6","1986-8-8”))
）
)
i
)
)
l<-list(c(1,2,3),c(4,5,6))
l
q()
library(DESeq2)
sessionInfo()
library(edgeR)
sessionInfo()
q()
setwd('/Users/xzh004/GitHub/EFSIS/scripts')
library(foreign)
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt')
View(dlbcl.raw)
write.arff(dlbcl.raw, '../data/DLBCL/dlbcl.arff')
dlbcl.arff <- read.arff('../data/DLBCL/dlbcl.arff')
View(dlbcl.arff)
iris <- load(iris)
iris <- load('iris')
head(iris)
write.arff(iris, '../data/DLBCL/iris.arff')
View(iris)
temp<-t(dlbcl.raw)
View(temp)
ncol(temp)
temp[,2648]
temp[,2648] <- factor(temp[,2648])
temp[,2648]
temp[,2647]
temp[1,]
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
View(dlbcl.raw)
temp <- t(dlbcl.raw)
temp[1:4,1:4]
ncol(temp)
temp[,2648]
class(temp[,2648])
temp[, ncol(temp)] <- factor(temp[, ncol(temp)])
class(temp[,2648])
class(temp[,2648])
temp[,2648]
temp[1,2648]
temp[, ncol(temp)] <- factor(temp[, ncol(temp)])
temp[1,2648]
levels(temp[,2648])
View(temp)
# Dlbcl
dlbcl.raw <- as.data.frame.matrix(read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1))
View(dlbcl.raw)
temp <- t(dlbcl.raw)
temp <- as.data.frame.matrix(t(dlbcl.raw))
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
temp <- as.data.frame.matrix(t(dlbcl.raw))
ncol(temp)
temp[,2648]
View(temp)
temp$ydlbcl
class(temp$ydlbcl)
temp$ydlbcl <- factor(temp$ydlbcl)
class(temp$ydlbcl)
# Dlbcl
dlbcl.raw <- read.table('../data/DLBCL/dlbcl_preprocessed.txt', row.names = 1)
dlbcl.df <- as.data.frame.matrix(t(dlbcl.raw))
dlbcl.df$ydlbcl <- factor(dlbcl.df$ydlbcl)
write.arff(dlbcl.df, '../data/DLBCL/dlbcl.arff')
dlbcl.arff <- read.arff('../data/DLBCL/dlbcl.arff')
# CNS
cns.raw <- read.arff('../data/CNS/cns')
View(cns.raw)
cns.raw$CLASS
temp$ydlbcl
write.arff(cns.raw, '../data/CNS/cns.arff')
# Leukemia
leukemia.train <- read.arff('../data/Leukemia/train.arff')
leukemia.test <- read.arff('../data/Leukemia/test.arff')
head(leukemia.test)
dim(leukemia.test)
leukemia.test[,1]
row.names(leukemia.test)
class(leukemia.test)
temp<- cbind(leukemia.train, leukemia.test)
temp<- rbind(leukemia.train, leukemia.test)
class(temp)
leukemia.raw <- rbind(leukemia.train, leukemia.test)
leukemia.raw$CLASS
leukemia.train$CLASS
leukemia.test$CLASS
write.arff(leukemia.raw, '../data/Leukemia/leukemia.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$yprostate.singh <- factor(prostate.singh.df$yprostate.singh)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
View(cns.raw)
dim(prostate.singh.raw)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
dim(prostate.singh.raw)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$ysingh
prostate.singh.raw$V103
prostate.singh.raw[,103]
prostate.singh.raw[1,103]
prostate.singh.raw[1,102]
prostate.singh.raw[2136,]
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
class(prostate.singh.raw)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
prostate.singh.df <- t(prostate.singh.raw)
class(prostate.singh.df)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
class(prostate.singh.df)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
write.arff(prostate.singh.raw, '../data/ProstateSingh/prostate.singh.arff')
prostate.singh.arff <- read.arff('../data/ProstateSingh/prostate.singh.arff')
dim(prostate.singh.raw)
prostate.singh.raw$V2
prostate.singh.raw$V103
prostate.singh.raw[1,2]
dim(prostate.singh.raw)
prostate.singh.raw[1,2136]
prostate.singh.raw[1,2135]
prostate.singh.raw[2136,]
prostate.singh.df[,1:2135]<- as.numeric(prostate.singh.df[,1:2135])
rep(2,3)
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = rep('numeric', 2136))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = c('string',rep('numeric', 2135)))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, colClasses = c('string',rep('numeric', 102)))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, stringsAsFactors = F)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$`1005_at`
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1)
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$ysingh
prostate.singh.df$`1005_at`
prostate.singh.df$ysingh
prostate.singh.df$`1005_at`
sapply(prostate.sign, mode)
sapply(prostate.singh.df, mode)
sapply(prostate.singh.df[,2136], mode)
dim(prostate.singh.df)
data(cars)
cars[,1:2]
cars
?sapply
temp<-sapply(prostate.singh.df[,1:2135], as.numeric)
class(temp)
temp<-as.data.frame(sapply(prostate.singh.df[,1:2135], as.numeric))
class(temp)
temp$`1005_at`
prostate.singh.df[,1]
prostate.singh.df$`1005_at`
# Prostate Singh
prostate.singh.raw <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, nrows = 2135)
dim(prostate.singh.raw)
prostate.singh.raw[2135,]
prostate.singh.df <- as.data.frame.matrix(t(prostate.singh.raw))
prostate.singh.df$`1005_at`
prostate.singh.class <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, skip = 2135)
prostate.singh.class
dim(prostate.singh.class)
# Prostate Singh
prostate.singh.feature <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, nrows = 2135)
prostate.singh.class <- read.table('../data/ProstateSingh/prostate_preprocessed.txt', row.names = 1, skip = 2135)
prostate.singh.feature.df <- as.data.frame.matrix(t(prostate.singh.feature))
prostate.singh.class.df <- as.data.frame.matrix(t(prostate.singh.class))
dim(prostate.singh.feature.df)
dim(prostate.singh.class.df)
View(prostate.singh.class.df)
prostate.singh.df <- cbind(prostate.singh.feature.df, prostate.singh.class.df)
write.arff(prostate.singh.df, '../data/ProstateSingh/prostate.singh.arff')
q()
test <- function(a, b){
c <- a + b
d <- 'A string'
output.list <- list(c, d)
}
output <- test(1, 3)
output
test <- function(a, b){
c <- a + b
d <- 'A string'
output.list <- list('sum' = c, 'string' = d)
}
output <- test(1, 3)
output$sum
output
path <- '../data/CNS/cns.arff'  # path to the data
data("iris")
View(iris)
install.packages('caret')
library('caret')
temp<-createFolds(iris, 10, T, T)
temp$Fold1
temp[1]
temp[5]
temp<-createFolds(t(iris), 10, T, T)
temp$Fold01
t(iris)
temp<-createFolds(iris, 10, T, F)
temp$Fold5
temp<-createFolds(iris, 10, F,F)
temp
temp<-createFolds(t(iris), 10, F,F)
sample.index <- c(1:nrow(iris))
temp<-createFolds(sample.index, 10, T, T)
temp$Fold10
temp$Fold1
num.sample <- numeric
num.sample <- numeric()
class(num.sample)
num.sample <- numeric
class(num.sample)
num.sample <- numeric()
path <- '../data/CNS/cns.arff'  # path to the data
# Load the data
data.raw <- read.arff(path)  # row -> sample, column -> feature
library(foreign)
library(rPython)  # to use RGIFE which is written in Python
# Load the data
data.raw <- read.arff(path)  # row -> sample, column -> feature
# Get the general information about this dataset
num.sample <- nrow(data.raw)
num.fea <- ncol(data.raw)  # number of features
num.fea <- ncol(data.raw) - 1  # number of features, but notice that the last column is the label
# Get the general information about this dataset
num.sample <- nrow(data.raw)  # number of samples
num.fea <- ncol(data.raw) - 1  # number of features, but notice that the last column is the label
pos.label <- num.fea + 1  # the position of the label marked in the dataset
# Split into training and test sets
labels <- data.raw[, pos.label]
labels
levels(labels)
temp<-levels(labels)
temp[]
temp[1]
temp[2]
# Split into training and test sets
labels <- data.raw[, pos.label]
label.control <- levels(labels)[1]
label.treat <- levels(labels)[2]  # only proper for 2-class classification problem
index.control <- which(labels == label.control)
index.treat <- which(labels == label.treat)
index.control
index.treat
k.folds <- 10  # k-fold cross validation
index.control.train.list <- createFolds(index.control, k.folds, T, T)
index.treat.train.list <- createFolds(index.treat, k.folds, T, T)
i<-1
# =============== Data Preparation ===============
index.train <- c(index.control.train.list[i], index.treat.train.list[i])
index.train
index.control.train.list[i]
index.control.train.list[[i]]
# =============== Data Preparation ===============
index.train <- c(index.control.train.list[[i]], index.treat.train.list[[i]])
index.train
index.control
index.train
index.treat
index.control.train.list <- createFolds(index.control, k.folds, T, T)
index.control.train.list[1]
index.control.train.list[2]
index.control.train.list <- createFolds(index.control, k.folds, T, F)
index.control.train.list[2]
index.control.train.list <- createFolds(index.control, k.folds, T, T)
index.control
index.control[index.control.train.list]
index.control <- which(labels == label.control)
index.treat <- which(labels == label.treat)
pos.control.train.list <- createFolds(index.control, k.folds, T, T)
pos.treat.train.list <- createFolds(index.treat, k.folds, T, T)
# =============== Data Preparation ===============
index.train <- c(index.control[pos.control.train.list[[i]]], index.treat[pos.treat.train.list[[i]]])
index.train
index.test <- c(index.control, index.treat)[-index.train]
set.seed(seed)
seed <- 12345
set.seed(seed)
pos.control.train.list <- createFolds(index.control, k.folds, T, T)  # the function gives the position of samples based on the 1st parameter
pos.treat.train.list <- createFolds(index.treat, k.folds, T, T)
# =============== Data Preparation ===============
index.train <- c(index.control[pos.control.train.list[[i]]], index.treat[pos.treat.train.list[[i]]])
index.test <- c(index.control, index.treat)[-index.train]
index.train <- c(index.control[pos.control.train.list[[i]]], index.treat[pos.treat.train.list[[i]]])
index.test <- c(index.control, index.treat)[-index.train]
data.train <- data.raw[index.train, ]  # row -> sample, column -> feature
data.test <- data.raw[index.test, ]
View(data.test)
paste('1','b')
paste('1','b',sep = '\/')
path <- '../data/CNS/'  # path to the data
data.file <- 'cns.arff'
# Load the data
data.raw <- read.arff(paste(path, data.file))  # row -> sample, column -> feature
# Get the general information about this dataset
num.sample <- nrow(data.raw)  # number of samples
num.fea <- ncol(data.raw) - 1  # number of features, but notice that the last column is the label
pos.label <- num.fea + 1  # the position of the label marked in the dataset
# Split into training and test sets
labels <- data.raw[, pos.label]
label.control <- levels(labels)[1]
label.treat <- levels(labels)[2]  # only proper for 2-class classification problem
index.control <- which(labels == label.control)
index.treat <- which(labels == label.treat)
set.seed(seed)
pos.control.train.list <- createFolds(index.control, k.folds, T, T)  # the function gives the position of samples based on the 1st parameter
pos.treat.train.list <- createFolds(index.treat, k.folds, T, T)
# save the data
write.arff(data.train, paste(path, i, 'fold', '-', data.file))
# save the data
write.arff(data.train, paste(path, i, 'fold', '-', data.file, sep = ''))
# save the data
write.arff(data.train, paste(path, i, 'fold', '-', 'train', data.file, sep = ''))
# save the data
write.arff(data.train, paste(path, i, 'fold', '-', 'train', '-', data.file, sep = ''))
write.arff(data.test, paste(path, i, 'fold', '-', 'test', '-', data.file, sep = ''))
library(rPython)  # to use RGIFE which is written in Python
?system
system('ls')
system(paste('cp', '../rgife/rgife.py', path.data))
path.data <- '../data/CNS/'  # path to the data
data.file <- 'cns.arff'
system(paste('cp', '../rgife/rgife.py', path.data))
# save the data
data.train.file.name <- paste(path.data, i, 'fold', '-', 'train', '-', data.file, sep = '')
data.test.file.name <- paste(path.data, i, 'fold', '-', 'test', '-', data.file, sep = '')
system(paste(path.data, 'rgife.py', ' ', path.data, 'configuration.conf', ' ', data.train.file.name))
system(paste(path.data, 'rgife.py', ' ', path.data, 'configuration.conf', ' ', data.train.file.name, sep = ''))
python.exec(paste(path.data, 'rgife.py', ' ', path.data, 'configuration.conf', ' ', data.train.file.name, sep = ''))
system(paste('python', ' ', path.data, 'rgife.py', ' ', path.data, 'configuration.conf', ' ', data.train.file.name, sep = ''))
getwd()
system(paste('cp', '../rgife/*', path.data))  # the code of RGIFE must be in the same directory as the data
system(paste('cp', '-r', '../rgife/*', path.data))  # the code of RGIFE must be in the same directory as the data
system('source activate python2')
system('source activate python2')
setwd(path.data)
# save the data
data.train.file.name <- paste(i, 'fold', '-', 'train', '-', data.file, sep = '')
data.test.file.name <- paste(i, 'fold', '-', 'test', '-', data.file, sep = '')
write.arff(data.train, paste(path.data, data.train.file.name))
write.arff(data.test, paste(path.data, data.test.file.name))
write.arff(data.train, paste(path.data, data.train.file.name, sep = ''))
# ============ Parameters definition ===========
path.script <- getwd()
setwd(path.script)
# save the data
data.train.file.name <- paste(i, 'fold', '-', 'train', '-', data.file, sep = '')
data.test.file.name <- paste(i, 'fold', '-', 'test', '-', data.file, sep = '')
write.arff(data.train, paste(path.data, data.train.file.name, sep = ''))
write.arff(data.test, paste(path.data, data.test.file.name, sep = ''))
getwd()
setwd('../../scripts/')
# ============ Parameters definition ===========
path.script <- setwd('/Users/xzh004/GitHub/EFSIS/scripts')
path.data <- '../data/CNS/'  # path to the data
data.file <- 'cns.arff'
system(paste('cp', '-r', '../rgife/*', path.data))  # the code of RGIFE must be in the same directory as the data
setwd(path.data)
system(paste('python2', ' ', 'rgife.py', ' ', 'configuration.conf', ' ', data.train.file.name, sep = ''))
Sys.getenv(‘R_HOME’)
Sys.getenv('R_HOME')
system(paste('python2.7', ' ', 'rgife.py', ' ', 'configuration.conf', ' ', data.train.file.name, sep = ''))
system('python2.7 --version')
system('python --version')
system('python --version')
Sys.getenv("PATH")
Sys.setenv(PATH=paste("//anaconda/envs/python2/bin",
Sys.getenv("PATH"), sep=":"))
Sys.getenv("PATH")
system('python --version')
system(paste('python', ' ', 'rgife.py', ' ', 'configuration.conf', ' ', data.train.file.name, sep = ''))
setwd(path.data)
2+1
getwd()
# ============ Parameters definition ===========
path.script <- setwd('/Users/xzh004/GitHub/EFSIS/scripts')
save.image(file = 'efsis_comp.RData')
q()
q()
